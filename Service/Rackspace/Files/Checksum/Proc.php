<?php
/**
 * @category   Kynx
 * @package    Kynx_Service
 * @subpackage Rackspace_Files_Checksum
 * @copyright  Copyright (c) 2012 Matt Kynaston (http://www.kynx.org)
 * @license    https://github.com/kynx/Kynx/blob/master/LICENSE New BSD
 */

/**
 * Performs on-the-fly checksumming by streaming data to system's md5 program
 *
 * Using this allows the checksum to be calculated without blocking the transfer.
 * For large files there may also be considerable performance improvements to
 * be got from using OpenSSL's MD5:
 * @see http://www.php.net/manual/en/function.md5-file.php#81751
 * @see Kynx_Service_Rackspace_Files_Checksum_Interface
 *
 * @category   Kynx
 * @package    Kynx_Service
 * @subpackage Rackspace_Files_Checksum
 * @copyright  Copyright (c) 2012 Matt Kynaston (http://www.kynx.org)
 * @license    https://github.com/kynx/Kynx/blob/master/LICENSE New BSD
 */
class Kynx_Service_Rackspace_Files_Checksum_Proc implements Kynx_Service_Rackspace_Files_Checksum_Interface
{
    /**
     * Handle to MD5 process
     *
     * @var resource
     */
    protected $process;

    /**
     * Pipes used to communicate with process
     * @var array
     */
    protected $pipes;

    /**
     * Concatenated sums
     * @var string
     */
    protected $sum = '';

    /**
     * Options passed to constructor
     *
     * @var array
     */
    protected $options = array(
        'exe' => 'md5sum', // md5 for FreeBSD/OSX, ??? Windows, 'openssl md5' for openssl
    );

    /**
     * Sanitized command to open
     *
     * @var string
     */
    protected $cmd;

    /**
     * Error messages generated by process
     *
     * @var string
     */
    public $error = '';

    /**
     * Constructor
     *
     * If md5sum is not on your path, or you want to use an alternate MD5 summer,
     * pass array('exe' => '/path/to/md5 --opt1 --opt1') as $options.
     *
     * @param array $options
     * @throws Kynx_Service_Rackspace_Files_Exception
     */
    public function __construct($options = array()) {
        $this->options = array_merge($this->options, $options);

        $exe = preg_replace('|^/?(\w*).*|', '$1', $this->options['exe']);
        $paths = explode(PATH_SEPARATOR, $_SERVER['PATH']);
        array_unshift($paths, '');
        foreach ($paths as $path) {
            if (is_executable($path . '/' . $exe)) {
                $path = $path . '/'
                      . (strpos('/', $this->options['exe']) === 0
                            ? substr($this->options['exe'], 1)
                            : $this->options['exe']);
                $this->cmd = escapeshellcmd($path);
                break;
            }
        }

        if (!$this->cmd) {
            /**
             * @see Kynx_Service_Rackspace_Files_Exception
             */
            throw new Kynx_Service_Rackspace_Files_Exception("Cannot find md5 executable");
        }
    }

    /**
     * Initializes checksum
     *
     * @throws Kynx_Service_Rackspace_Files_Exception
     */
    public function open()
    {
        if ($this->process) {
            /**
             * @see Kynx_Service_Rackspace_Files_Exception
             */
            throw new Kynx_Service_Rackspace_Files_Exception("Process is already open");
        }
        $this->sum = '';

        $descriptorspec = array(
           0 => array("pipe", "r"),
           1 => array("pipe", "w"),
           2 => array("pipe", "a")
        );

        $this->process = proc_open($this->cmd, $descriptorspec, $this->pipes);
        if (!is_resource($this->process)) {
            /**
             * @see Kynx_Service_Rackspace_Files_Exception
             */
            throw new Kynx_Service_Rackspace_Files_Exception("Couldn't open temp file");
        }

        // don't block writes or reads
        foreach (array_keys($this->pipes) as $p) {
            stream_set_blocking($this->pipes[$p], 0);
        }
    }

    /**
     * Appends data to be checksummed
     *
     * @param string $data
     * @return integer     Length of data appended, false on failure
     */
    public function append($data)
    {
        $status = proc_get_status($this->process);
        if (empty($status['running'])) {
            $this->close();
            /**
             * @see Kynx_Service_Rackspace_Files_Exception
             */
            throw new Kynx_Service_Rackspace_Files_Exception("Process not running");
        }

        $written = 0;
        $len = strlen($data);
        $read = null;
        $write = array($this->pipes[0]);
        $except = null;
        $wlen = true;

        // wait for pipe to be ready then be sure all data has been written
        while ($wlen && $written < $len) {
            if (false !== ($num = stream_select($read, $write, $except, 2)) && $num) {
                $wlen = fwrite($this->pipes[0], $data, strlen($data));
                if ($wlen !== false) {
                    $written += $wlen;
                    $data = substr($data, $wlen);
                }
            }
            elseif ($num === false) {
                $wlen = false;
            }
        }
        return $written == $len ? $written : false;
    }

    /**
     * Returns checksum
     *
     * @return string
     */
    public function getSum()
    {
        $this->calculate();
        return $this->sum;
    }

    /**
     * Calculates checksum
     *
     * @return string  Checksum, false on failure
     */
    public function calculate()
    {
        $sum = $err = false;
        if ($this->process) {
            fclose($this->pipes[0]);
            unset($this->pipes[0]);

            // wait for first pipe with input to read
            $read = array($this->pipes[1], $this->pipes[2]);
            $write = $except = null;
            $str = '';
            while (!$str) {
                if ($num = stream_select($read, $write, $except, 2)) {
                    while ($s = fread($read[0], 1024)) {
                        $str .= $s;
                    }
                    if ($read[0] == $this->pipes[1]) {
                        $sum .= substr($str, 0, 32);
                    }
                    else {
                        $err .= $str;
                    }
                }
                if ($num === false) {
                    /**
                     * @see Kynx_Service_Rackspace_Files_Exception
                     */
                    throw new Kynx_Service_Rackspace_Files_Exception("Couldn't read from checksum process");
                }
            }

            if (!$err && $sum) {
                $this->sum .= $sum;
            }
            else {
                $sum = false;
            }
        }
        $this->close();
        return $sum;
    }

    /**
     * Closes checksum, performing any cleanup
     */
    public function close()
    {
        if ($this->process) {
            foreach ($this->pipes as $i) {
                @fclose($this->pipes[$i]);
            }
            proc_close($this->process);
            $this->process = null;
        }
    }

    public function __destruct()
    {
        $this->close();
    }
}